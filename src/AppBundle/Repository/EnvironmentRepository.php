<?php

namespace AppBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * EnvironmentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EnvironmentRepository extends \Doctrine\ORM\EntityRepository
{
   public function findAllOrderedByName($page, $nbMaxParPage)
    {
       
        if (!is_numeric($page)) {
            throw new InvalidArgumentException(
                'La valeur de l\'argument $page est incorrecte (valeur : ' . $page . ').'
            );
        }

        if ($page < 1) {
            throw new NotFoundHttpException('La page demandée n\'existe pas');
        }

        if (!is_numeric($nbMaxParPage)) {
            throw new InvalidArgumentException(
                'La valeur de l\'argument $nbMaxParPage est incorrecte (valeur : ' . $nbMaxParPage . ').'
            );
        }        

         $qb = $this->createQueryBuilder('e')
            ->orderBy('e.name', 'DESC');
        
        $query = $qb->getQuery();
        
        
        $premierResultat = ($page - 1) * $nbMaxParPage;
        $query->setFirstResult($premierResultat)->setMaxResults($nbMaxParPage);
        $paginator = new Paginator($query);

        if ( ($paginator->count() <= $premierResultat) && $page != 1) {
            throw new NotFoundHttpException('La page demandée n\'existe pas.'); // page 404, sauf pour la première page
        }

        return $paginator;        
        
/*        
        return $this->getEntityManager()
            ->createQuery(
                'SELECT e FROM AppBundle:Environment e ORDER BY e.name ASC'
            )
            ->getResult();
 * 
 */
    }       
    public function findByEnvId($envid)
    {
        $query= $this->getEntityManager()
            ->createQuery(
                'SELECT e, ed FROM AppBundle:Environment e 
                    JOIN e.envDetails ed
                    WHERE e.id = :envid'
            )->setParameter('envid', $envid);
        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }    }
}
